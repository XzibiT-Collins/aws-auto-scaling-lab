AWSTemplateFormatVersion: 2010-09-09
Description: Provisioning an auto-scaling group using cloud formation

Parameters:
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.4.0/24

  InstanceType:
    Type: String
    Default: t3.micro

  AmiImage:
    Type: String
    Default: ami-015cbce10f839bd0c

Resources:
  # VPC
  AsgVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AsgVPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AsgVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: eu-central-1a

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AsgVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: eu-central-1b

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AsgVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: eu-central-1a

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AsgVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: eu-central-1b

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AsgVPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  AssociatePublicSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  AssociatePublicSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AsgVPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  AssociatePrivateSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  AssociatePrivateSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP & SSM access
      VpcId: !Ref AsgVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG (Http Traffic from internet)
      VpcId: !Ref AsgVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub alb-${AWS::StackName}
      Scheme: internet-facing
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      SecurityGroups: [!Ref LoadBalancerSecurityGroup]

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub tg-${AWS::StackName}
      VpcId: !Ref AsgVPC
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckPath: /
      Matcher:
        HttpCode: '200'

  # Listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # ✅ Launch Template (moved out of Listener and fixed)
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub launch-template-${AWS::StackName}
      LaunchTemplateData:
        ImageId: !Ref AmiImage
        InstanceType: !Ref InstanceType
        SecurityGroupIds: [!Ref InstanceSecurityGroup]
        MetadataOptions:
          HttpTokens: required
        UserData:
          Fn::Base64: |
            #!/bin/bash -ex
        
            # Update system and install Apache & PHP
            yum update -y
            yum install -y httpd stress php
        
            # Create the main HTML page with an iframe to show dynamic content
            cat > /var/www/html/index.html << 'EOF'
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Load Balancer Test</title>
                <style>
                    body { 
                        font-family: Arial, sans-serif; 
                        max-width: 800px; 
                        margin: 50px auto; 
                        padding: 20px; 
                        background-color: #f5f5f5;
                    }
                    .container { 
                        background: white; 
                        padding: 30px; 
                        border-radius: 10px; 
                        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    }
                    h1 { color: #333; }
                    .info-box { 
                        background: #e8f4f8; 
                        padding: 15px; 
                        border-left: 4px solid #0073bb; 
                        margin: 20px 0; 
                        border-radius: 4px;
                    }
                    .server-info { 
                        background: #f0f8f0; 
                        padding: 15px; 
                        border-left: 4px solid #2ca02c; 
                        margin: 20px 0; 
                        border-radius: 4px;
                    }
                    button { 
                        background: #ff6b6b; 
                        color: white; 
                        border: none; 
                        padding: 12px 24px; 
                        border-radius: 5px; 
                        cursor: pointer; 
                        font-size: 16px; 
                        margin: 10px 0;
                    }
                    button:hover { background: #ff5252; }
                    .timestamp { color: #666; font-size: 0.9em; }
                    #dynamic-content {
                        width: 100%;
                        height: 300px;
                        border: 1px solid #ddd;
                        border-radius: 5px;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>🚀 Load Balancer Test Page</h1>
                    
                    <div class="info-box">
                        <h2>Load Balancer Information</h2>
                        <p>This page is served by one of the instances behind your load balancer.</p>
                        <p>Refresh the page to see if you get a different instance!</p>
                        <p class="timestamp"><strong>Page generated at:</strong> <span id="timestamp"></span></p>
                    </div>
        
                    <!-- This iframe will load the dynamic PHP content -->
                    <iframe id="dynamic-content" src="/info.php" title="Instance Information"></iframe>
        
                    <div>
                        <h2>Stress Test</h2>
                        <p>Click the button below to simulate CPU load on this instance:</p>
                        <button onclick="startStressTest()">Start Stress Test (30 seconds)</button>
                        <div id="stressStatus"></div>
                    </div>
        
                    <script>
                        document.getElementById('timestamp').textContent = new Date().toLocaleString();
                        
                        function startStressTest() {
                            const button = document.querySelector('button');
                            const statusDiv = document.getElementById('stressStatus');
                            const iframe = document.getElementById('dynamic-content');
                            
                            button.disabled = true;
                            button.textContent = 'Stress test running...';
                            statusDiv.innerHTML = '<p>🔄 Stress test started - simulating CPU load for 30 seconds...</p>';
                            
                            // Use Fetch API to trigger the stress test
                            fetch('/cgi-bin/stress-test', {
                                method: 'POST'
                            })
                            .then(response => response.text())
                            .then(data => {
                                statusDiv.innerHTML = '<p>✅ Stress test completed successfully!</p>';
                                button.textContent = 'Start Stress Test (30 seconds)';
                                button.disabled = false;
                                // Reload the iframe to show updated info (possibly higher CPU)
                                iframe.src = iframe.src;
                            })
                            .catch(error => {
                                statusDiv.innerHTML = '<p>❌ Error starting stress test: ' + error + '</p>';
                                button.textContent = 'Start Stress Test (30 seconds)';
                                button.disabled = false;
                            });
                        }
        
                        // Optional: Reload the iframe every 5 seconds to see if load balancer switches instances
                        // setInterval(() => {
                        //     document.getElementById('dynamic-content').src = document.getElementById('dynamic-content').src;
                        // }, 5000);
                    </script>
                </div>
            </body>
            </html>
            EOF
        
            # Create the PHP script that fetches REAL-TIME metadata
            cat > /var/www/html/info.php << 'EOF'
            <?php
            // Function to fetch instance metadata
            function get_instance_metadata($path) {
                $url = "http://169.254.169.254/latest/meta-data/" . $path;
                $ch = curl_init();
                curl_setopt($ch, CURLOPT_URL, $url);
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                curl_setopt($ch, CURLOPT_TIMEOUT, 2);
                curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 2);
                $result = curl_exec($ch);
                curl_close($ch);
                return $result ?: 'Unavailable';
            }
        
            // Get all metadata
            $instance_id = get_instance_metadata('instance-id');
            $availability_zone = get_instance_metadata('placement/availability-zone');
            $private_ip = get_instance_metadata('local-ipv4');
            $public_ip = get_instance_metadata('public-ipv4');
        
            // Get CPU info for fun (requires sysctl, may not work on all AMIs)
            $cpu_count = shell_exec('nproc 2>/dev/null') ?: 'Unknown';
            $load_avg = shell_exec('cat /proc/loadavg 2>/dev/null') ?: 'Unknown';
            ?>
            <!DOCTYPE html>
            <html>
            <head>
                <style>
                    body { 
                        font-family: Arial, sans-serif; 
                        padding: 20px; 
                        margin: 0;
                        background: #f0f8f0; 
                    }
                    h2 { color: #2ca02c; margin-top: 0; }
                    p { margin: 8px 0; }
                    strong { color: #333; }
                </style>
            </head>
            <body>
                <h2>🖥️ Current Server Details (Live)</h2>
                <p><strong>Instance ID:</strong> <?php echo htmlspecialchars($instance_id); ?></p>
                <p><strong>Availability Zone:</strong> <?php echo htmlspecialchars($availability_zone); ?></p>
                <p><strong>Private IP:</strong> <?php echo htmlspecialchars($private_ip); ?></p>
                <p><strong>Public IP:</strong> <?php echo htmlspecialchars($public_ip); ?></p>
                <p><strong>CPU Cores:</strong> <?php echo htmlspecialchars(trim($cpu_count)); ?></p>
                <p><strong>Load Average:</strong> <?php echo htmlspecialchars(trim($load_avg)); ?></p>
                <p><strong>Updated:</strong> <?php echo date('Y-m-d H:i:s'); ?></p>
            </body>
            </html>
            EOF
        
            # Create stress test CGI script
            mkdir -p /var/www/cgi-bin
            cat > /var/www/cgi-bin/stress-test << 'EOF'
            #!/bin/bash
            echo "Content-type: text/plain"
            echo ""
            echo "Starting stress test for 30 seconds..."
            # Run stress test in background and immediately return response
            nohup timeout 30s stress --cpu 2 --vm 1 --vm-bytes 512M > /var/log/stress-test.log 2>&1 &
            echo "Stress test initiated"
            EOF
        
            # Make CGI script executable
            chmod +x /var/www/cgi-bin/stress-test
        
            # Set proper permissions
            chown -R apache:apache /var/www/html
            chown -R apache:apache /var/www/cgi-bin
        
            # Enable and start Apache
            systemctl enable httpd
            systemctl start httpd
        
            # Configure Apache to allow CGI execution
            echo "ScriptAlias /cgi-bin/ /var/www/cgi-bin/" >> /etc/httpd/conf/httpd.conf
            echo "<Directory \"/var/www/cgi-bin\">" >> /etc/httpd/conf/httpd.conf
            echo "    Options +ExecCGI" >> /etc/httpd/conf/httpd.conf
            echo "    AddHandler cgi-script .cgi .sh" >> /etc/httpd/conf/httpd.conf
            echo "    Require all granted" >> /etc/httpd/conf/httpd.conf
            echo "</Directory>" >> /etc/httpd/conf/httpd.conf
        
            # Restart Apache to apply changes
            systemctl restart httpd
        
            # Create a simple health check endpoint
            echo "OK" > /var/www/html/health.html
        
            # Log completion
            echo "UserData script completed successfully at $(date)" >> /var/log/user-data.log
        

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      MinSize: "1"
      MaxSize: "4"
      DesiredCapacity: "1"
      TargetGroupARNs: 
        - !Ref TargetGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      MetricsCollection:
        - Granularity: "1Minute"

  # Scaling Policy
  CPUScalingTargetTracking:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50.0
      PolicyType: TargetTrackingScaling

Outputs:
  ALBEndpoint:
    Description: Public URL for the Application Load Balancer
    Value: !Sub "http://${LoadBalancer.DNSName}"
