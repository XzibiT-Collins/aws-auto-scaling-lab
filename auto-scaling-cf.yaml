AWSTemplateFormatVersion: 2010-09-09
Description: Provisioning an auto-scaling group using cloud formation

Parameters:
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.4.0/24

  InstanceType:
    Type: String
    Default: t3.micro

  AmiImage:
    Type: String
    Default: ami-015cbce10f839bd0c

Resources:
  # VPC
  AsgVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AsgVPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AsgVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: eu-central-1a

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AsgVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: eu-central-1b

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AsgVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: eu-central-1a

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AsgVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: eu-central-1b

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AsgVPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  AssociatePublicSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  AssociatePublicSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AsgVPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  AssociatePrivateSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  AssociatePrivateSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP & SSM access
      VpcId: !Ref AsgVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG (Http Traffic from internet)
      VpcId: !Ref AsgVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub alb-${AWS::StackName}
      Scheme: internet-facing
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      SecurityGroups: [!Ref LoadBalancerSecurityGroup]

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub tg-${AWS::StackName}
      VpcId: !Ref AsgVPC
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckPath: /
      Matcher:
        HttpCode: '200'

  # Listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub launch-template-${AWS::StackName}
      LaunchTemplateData:
        ImageId: !Ref AmiImage
        InstanceType: !Ref InstanceType
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups: [!Ref InstanceSecurityGroup]
            AssociatePublicIpAddress: true # <- This is the crucial line
        MetadataOptions:
          HttpTokens: required
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Update the system
            yum update -y
            
            # Install Apache and stress
            yum install -y httpd stress
            
            # Start and enable Apache
            systemctl start httpd
            systemctl enable httpd
            
            # Create a simple web page with instance info and stress test button
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            PRIVATE_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
            
            cat > /var/www/html/index.html << EOF
            <!DOCTYPE html>
            <html>
            <head>
                <title>Auto Scaling Lab</title>
                <style>
                    body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }
                    h1 { color: #333; }
                    .info { background-color: #f5f5f5; padding: 20px; border-radius: 5px; display: inline-block; }
                    .stress-btn { 
                        background-color: #ff4757; 
                        color: white; 
                        border: none; 
                        padding: 15px 32px; 
                        text-align: center; 
                        text-decoration: none; 
                        display: inline-block; 
                        font-size: 16px; 
                        margin: 20px 2px; 
                        cursor: pointer; 
                        border-radius: 5px;
                    }
                    .stress-btn:hover { background-color: #ff6b81; }
                </style>
            </head>
            <body>
                <h1>Auto Scaling Lab</h1>
                <div class="info">
                    <h2>Hello from $PRIVATE_IP / $INSTANCE_ID</h2>
                    <p>This instance is part of an Auto Scaling Group</p>
                    <button class="stress-btn" onclick="startStressTest()">Stress Test CPU</button>
                    <p id="status"></p>
                </div>
                
                <script>
                    function startStressTest() {
                        document.getElementById('status').innerText = 'Starting CPU stress test for 60 seconds...';
                        
                        // Use fetch API to trigger stress test
                        fetch('/stress', { method: 'POST' })
                            .then(response => response.text())
                            .then(data => {
                                document.getElementById('status').innerText = 'Stress test completed!';
                            })
                            .catch(error => {
                                document.getElementById('status').innerText = 'Error starting stress test: ' + error;
                            });
                    }
                </script>
            </body>
            </html>
            EOF
            
            # Create a simple stress test script that definitely works
            cat > /var/www/html/stress.php << 'EOF'
            <?php
            header('Content-Type: text/plain');
            echo "Starting CPU stress test...\n";
            flush();
            
            // Fork a background process to do CPU intensive work
            $pid = pcntl_fork();
            if ($pid == 0) {
                // Child process - do CPU intensive work
                $end_time = time() + 60; // Run for 60 seconds
                while (time() < $end_time) {
                    // CPU intensive operations
                    for ($i = 0; $i < 1000000; $i++) {
                        sqrt($i);
                    }
                }
                exit(0);
            }
            echo "CPU stress test started (PID: $pid)\n";
            ?>
            EOF
            
            # Install PHP
            yum install -y php
            
            # Create a CGI script to handle stress test
            mkdir -p /var/www/cgi-bin
            cat > /var/www/cgi-bin/stress.sh << 'EOF'
            #!/bin/bash
            echo "Content-type: text/plain"
            echo ""
            echo "Starting CPU stress test for 60 seconds..."
            
            # Create CPU load using dd and /dev/zero
            timeout 60 bash -c '
                for i in {1..4}; do
                    dd if=/dev/zero of=/dev/null bs=1M &
                done
                wait
            ' &
            
            echo "CPU stress test initiated"
            EOF
            
            chmod +x /var/www/cgi-bin/stress.sh
            
            # Configure Apache to handle the stress test endpoint
            cat > /etc/httpd/conf.d/stress.conf << EOF
            ScriptAlias /stress /var/www/cgi-bin/stress.sh
            <Directory "/var/www/cgi-bin">
                AllowOverride None
                Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
                Require all granted
            </Directory>
            EOF
            
            # Restart Apache to apply changes
            systemctl restart httpd
        

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      MinSize: "1"
      MaxSize: "4"
      DesiredCapacity: "1"
      TargetGroupARNs: 
        - !Ref TargetGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      MetricsCollection:
        - Granularity: "1Minute"

  # Scaling Policy
  CPUScalingTargetTracking:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50.0
      PolicyType: TargetTrackingScaling

Outputs:
  ALBEndpoint:
    Description: Public URL for the Application Load Balancer
    Value: !Sub "http://${LoadBalancer.DNSName}"
