AWSTemplateFormatVersion: '2010-09-09'
Description: Auto Scaling Lab with Apache Web Server (t3.micro) - Modified logical names for clarity

Parameters:
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:
  # VPC
  AsgVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # Attach Internet Gateway to VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AsgVPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AsgVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: eu-central-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: AutoScalingLabPublicSubnet1

  # Public Subnet 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AsgVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: eu-central-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: AutoScalingLabPublicSubnet2

  # Private Subnet 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AsgVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: eu-central-1a


  # Private Subnet 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AsgVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: eu-central-1b


  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AsgVPC


  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AsgVPC

  # Public Route
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Public Subnet 1 with Public Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  # Associate Public Subnet 2 with Public Route Table
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Associate Private Subnet 1 with Private Route Table
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  # Associate Private Subnet 2 with Private Route Table
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # NAT Gateway EIP
  NATEip1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment

  NATEip2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment

  # NAT Gateway 1
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATEip1.AllocationId
      SubnetId: !Ref PublicSubnet1


  # NAT Gateway 2
  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATEip2.AllocationId
      SubnetId: !Ref PublicSubnet2

  # Private Route
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  # Security Group for ALB
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to ALB
      VpcId: !Ref AsgVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Security Group for EC2 Instances
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access from ALB and SSH from specific IP
      VpcId: !Ref AsgVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Application Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: alb-AutoScalingLab
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  # ALB Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: tg-AutoScalingLab
      VpcId: !Ref AsgVPC
      Port: 80
      Protocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: instance

  # ALB Listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: lt-AutoScalingLab
      LaunchTemplateData:
        ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}'
        InstanceType: t3.micro
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Update the system
            yum update -y

            # Install Apache, stress, and PHP
            yum install -y httpd stress php

            # Start and enable Apache
            systemctl start httpd
            systemctl enable httpd

            # Get instance metadata
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            PRIVATE_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
            AVAILABILITY_ZONE=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
            INSTANCE_TYPE=$(curl -s http://169.254.169.254/latest/meta-data/instance-type)

            # Create the enhanced web page
            cat > /var/www/html/index.html << EOF
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>AWS Auto Scaling Lab</title>
                <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
                <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
                <style>
                    :root {
                        --primary: #232f3e;
                        --secondary: #ff9900;
                        --accent: #00a1c9;
                        --light: #f2f3f8;
                        --dark: #161e2d;
                        --success: #1d8102;
                        --danger: #d13212;
                        --warning: #ffc107;
                        --info: #17a2b8;
                    }

                    * {
                        margin: 0;
                        padding: 0;
                        box-sizing: border-box;
                    }

                    body {
                        font-family: 'Inter', sans-serif;
                        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
                        color: var(--dark);
                        line-height: 1.6;
                        min-height: 100vh;
                        padding: 20px;
                    }

                    .container {
                        max-width: 1200px;
                        margin: 0 auto;
                    }

                    header {
                        text-align: center;
                        margin-bottom: 30px;
                        padding: 20px;
                        background: white;
                        border-radius: 12px;
                        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
                    }

                    h1 {
                        color: var(--primary);
                        font-size: 2.5rem;
                        margin-bottom: 10px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        gap: 15px;
                    }

                    .subtitle {
                        color: #666;
                        font-size: 1.1rem;
                        font-weight: 400;
                    }

                    .dashboard {
                        display: grid;
                        grid-template-columns: 1fr 1fr;
                        gap: 25px;
                        margin-bottom: 30px;
                    }

                    @media (max-width: 768px) {
                        .dashboard {
                            grid-template-columns: 1fr;
                        }
                    }

                    .card {
                        background: white;
                        border-radius: 12px;
                        padding: 25px;
                        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
                        transition: transform 0.3s ease, box-shadow 0.3s ease;
                    }

                    .card:hover {
                        transform: translateY(-5px);
                        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.12);
                    }

                    .card-header {
                        display: flex;
                        align-items: center;
                        margin-bottom: 20px;
                        padding-bottom: 15px;
                        border-bottom: 1px solid #eee;
                    }

                    .card-title {
                        font-size: 1.4rem;
                        color: var(--primary);
                        margin-left: 12px;
                    }

                    .card-icon {
                        background: var(--primary);
                        color: white;
                        width: 40px;
                        height: 40px;
                        border-radius: 10px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        font-size: 18px;
                    }

                    .info-grid {
                        display: grid;
                        grid-template-columns: 1fr 1fr;
                        gap: 15px;
                    }

                    .info-item {
                        margin-bottom: 15px;
                    }

                    .info-label {
                        font-size: 0.85rem;
                        color: #666;
                        margin-bottom: 5px;
                        display: flex;
                        align-items: center;
                        gap: 5px;
                    }

                    .info-value {
                        font-size: 1.1rem;
                        font-weight: 600;
                        color: var(--primary);
                        word-break: break-all;
                    }

                    .ip-address {
                        background: var(--light);
                        padding: 8px 12px;
                        border-radius: 6px;
                        font-family: monospace;
                    }

                    .actions {
                        text-align: center;
                    }

                    .btn {
                        display: inline-flex;
                        align-items: center;
                        justify-content: center;
                        gap: 8px;
                        padding: 14px 28px;
                        font-size: 1rem;
                        font-weight: 600;
                        border: none;
                        border-radius: 8px;
                        cursor: pointer;
                        transition: all 0.3s ease;
                        margin: 10px;
                    }

                    .btn-primary {
                        background: var(--secondary);
                        color: white;
                    }

                    .btn-primary:hover {
                        background: #e88a00;
                        transform: translateY(-2px);
                    }

                    .btn-danger {
                        background: var(--danger);
                        color: white;
                    }

                    .btn-danger:hover {
                        background: #b52a10;
                        transform: translateY(-2px);
                    }

                    .status {
                        margin-top: 20px;
                        padding: 15px;
                        border-radius: 8px;
                        text-align: center;
                        font-weight: 500;
                    }

                    .status-loading {
                        background: #e8f4f8;
                        color: var(--info);
                        border-left: 4px solid var(--info);
                    }

                    .status-success {
                        background: #e8f6ef;
                        color: var(--success);
                        border-left: 4px solid var(--success);
                    }

                    .status-error {
                        background: #fdecea;
                        color: var(--danger);
                        border-left: 4px solid var(--danger);
                    }

                    .footer {
                        text-align: center;
                        margin-top: 40px;
                        padding: 20px;
                        color: #666;
                        font-size: 0.9rem;
                    }

                    .badge {
                        display: inline-block;
                        padding: 4px 10px;
                        border-radius: 20px;
                        font-size: 0.8rem;
                        font-weight: 600;
                        margin-left: 8px;
                    }

                    .badge-success {
                        background: #e8f6ef;
                        color: var(--success);
                    }

                    .badge-info {
                        background: #e8f4f8;
                        color: var(--info);
                    }

                    .refresh-hint {
                        margin-top: 15px;
                        font-size: 0.9rem;
                        color: #666;
                        text-align: center;
                    }

                    .pulse {
                        animation: pulse 2s infinite;
                    }

                    @keyframes pulse {
                        0% { transform: scale(1); }
                        50% { transform: scale(1.05); }
                        100% { transform: scale(1); }
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <header>
                        <h1><i class="fas fa-cloud-upload-alt"></i> AWS Auto Scaling Lab</h1>
                        <p class="subtitle">Monitor and test your auto-scaling group performance</p>
                    </header>

                    <div class="dashboard">
                        <div class="card">
                            <div class="card-header">
                                <div class="card-icon">
                                    <i class="fas fa-server"></i>
                                </div>
                                <h2 class="card-title">Instance Details</h2>
                            </div>
                            <div class="info-grid">
                                <div class="info-item">
                                    <div class="info-label">
                                        <i class="fas fa-fingerprint"></i> Instance ID
                                    </div>
                                    <div class="info-value"> $INSTANCE_ID</div>
                                </div>
                                <div class="info-item">
                                    <div class="info-label">
                                        <i class="fas fa-network-wired"></i> Private IP
                                    </div>
                                    <div class="info-value ip-address"> $PRIVATE_IP</div>
                                </div>
                                <div class="info-item">
                                    <div class="info-label">
                                        <i class="fas fa-globe-americas"></i> Availability Zone
                                    </div>
                                    <div class="info-value"> $AVAILABILITY_ZONE</div>
                                </div>
                                <div class="info-item">
                                    <div class="info-label">
                                        <i class="fas fa-tachometer-alt"></i> Instance Type
                                    </div>
                                    <div class="info-value"> $INSTANCE_TYPE</div>
                                </div>
                            </div>
                            <div class="refresh-hint">
                                <i class="fas fa-sync-alt"></i> Refresh the page to see if you're served by a different instance
                            </div>
                        </div>

                        <div class="card">
                            <div class="card-header">
                                <div class="card-icon" style="background: var(--danger);">
                                    <i class="fas fa-bolt"></i>
                                </div>
                                <h2 class="card-title">Performance Testing</h2>
                            </div>
                            <p>Simulate CPU load to test auto-scaling policies and load balancing.</p>
                            <div class="actions">
                                <button class="btn btn-danger pulse" onclick="startStressTest()">
                                    <i class="fas fa-bolt"></i> Start Stress Test
                                </button>
                            </div>
                            <div id="status" class="status"></div>
                            <div class="info-item" style="margin-top: 20px;">
                                <div class="info-label">
                                    <i class="fas fa-info-circle"></i> Test Information
                                </div>
                                <div class="info-value">
                                    The test will generate CPU load for 60 seconds
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="footer">
                        <p>AWS Auto Scaling Lab Demonstration <span class="badge badge-info">v2.0</span></p>
                        <p>Refresh page to verify load balancing across instances</p>
                    </div>
                </div>

                <script>
                    function startStressTest() {
                        const statusEl = document.getElementById('status');
                        statusEl.className = 'status status-loading';
                        statusEl.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Starting CPU stress test for 60 seconds...';

                        // Use fetch API to trigger stress test
                        fetch('/stress', { method: 'POST' })
                            .then(response => response.text())
                            .then(data => {
                                statusEl.className = 'status status-success';
                                statusEl.innerHTML = '<i class="fas fa-check-circle"></i> Stress test completed successfully!';
                            })
                            .catch(error => {
                                statusEl.className = 'status status-error';
                                statusEl.innerHTML = '<i class="fas fa-exclamation-circle"></i> Error starting stress test: ' + error;
                            });
                    }

                    // Add subtle animation to cards on page load
                    document.addEventListener('DOMContentLoaded', function() {
                        const cards = document.querySelectorAll('.card');
                        cards.forEach((card, index) => {
                            card.style.opacity = '0';
                            card.style.transform = 'translateY(20px)';
                            setTimeout(() => {
                                card.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
                                card.style.opacity = '1';
                                card.style.transform = 'translateY(0)';
                            }, 100 * index);
                        });
                    });
                </script>
            </body>
            </html>
            EOF

            # Create a simple stress test script that definitely works
            cat > /var/www/html/stress.php << EOF
            <?php
            header('Content-Type: text/plain');
            echo "Starting CPU stress test...\n";
            flush();

            // Fork a background process to do CPU intensive work
            $pid = pcntl_fork();
            if ($pid == 0) {
                // Child process - do CPU intensive work
                $end_time = time() + 60; // Run for 60 seconds
                while (time() < $end_time) {
                    // CPU intensive operations
                    for ($i = 0; $i < 1000000; $i++) {
                        sqrt($i);
                    }
                }
                exit(0);
            }
            echo "CPU stress test started (PID: $pid)\n";
            ?>
            EOF

            # Create a CGI script to handle stress test
            mkdir -p /var/www/cgi-bin
            cat > /var/www/cgi-bin/stress.sh << EOF
            #!/bin/bash
            echo "Content-type: text/plain"
            echo ""
            echo "Starting CPU stress test for 60 seconds..."

            # Create CPU load using dd and /dev/zero
            timeout 60 bash -c '
                for i in {1..4}; do
                    dd if=/dev/zero of=/dev/null bs=1M &
                done
                wait
            ' &

            echo "CPU stress test initiated"
            EOF

            chmod +x /var/www/cgi-bin/stress.sh

            # Configure Apache to handle the stress test endpoint
            cat > /etc/httpd/conf.d/stress.conf << EOF
            ScriptAlias /stress /var/www/cgi-bin/stress.sh
            <Directory "/var/www/cgi-bin">
                AllowOverride None
                Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
                Require all granted
            </Directory>
            EOF

            # Restart Apache to apply changes
            systemctl restart httpd

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: asg-AutoScalingLab
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 4
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref TargetGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT5M

  # Scale Up Policy
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 60
      ScalingAdjustment: 1

  # Scale Down Policy
  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -1

  # CPU High Alarm (Scale Out) - LOWERED THRESHOLD FOR TESTING
  CpuAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 50% for 1 minutes (lowered for testing)
      Metrics:
        - Id: m1
          MetricStat:
            Metric:
              Namespace: AWS/EC2
              MetricName: CPUUtilization
              Dimensions:
                - Name: AutoScalingGroupName
                  Value: !Ref AutoScalingGroup
            Period: 60
            Stat: Average
          ReturnData: true
      ComparisonOperator: GreaterThanThreshold
      Threshold: 50
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      AlarmActions:
        - !Ref ScaleUpPolicy

  # CPU Low Alarm (Scale In)
  CpuAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 20% for 5 minutes
      Metrics:
        - Id: m1
          MetricStat:
            Metric:
              Namespace: AWS/EC2
              MetricName: CPUUtilization
              Dimensions:
                - Name: AutoScalingGroupName
                  Value: !Ref AutoScalingGroup
            Period: 60
            Stat: Average
          ReturnData: true
      ComparisonOperator: LessThanThreshold
      Threshold: 20
      EvaluationPeriods: 5
      DatapointsToAlarm: 5
      AlarmActions:
        - !Ref ScaleDownPolicy

Outputs:
  LoadBalancerDNS:
    Description: Load Balancer DNS Name
    Value: !GetAtt LoadBalancer.DNSName

  AlbEndpoint:
    Description: URL for the Load Balancer
    Value: !Sub http://${LoadBalancer.DNSName}