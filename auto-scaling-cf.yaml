AWSTemplateFormatVersion: 2010-09-09
Description: Provisioning an auto-scaling group using cloud formation

Parameters:
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.4.0/24

  InstanceType:
    Type: String
    Default: t3.micro

  AmiImage:
    Type: String
    Default: ami-015cbce10f839bd0c

Resources:
  # VPC
  AsgVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AsgVPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AsgVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: eu-central-1a

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AsgVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: eu-central-1b

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AsgVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: eu-central-1a

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AsgVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: eu-central-1b

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AsgVPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  AssociatePublicSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  AssociatePublicSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AsgVPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  AssociatePrivateSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  AssociatePrivateSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP & SSM access
      VpcId: !Ref AsgVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG (Http Traffic from internet)
      VpcId: !Ref AsgVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub alb-${AWS::StackName}
      Scheme: internet-facing
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      SecurityGroups: [!Ref LoadBalancerSecurityGroup]

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub tg-${AWS::StackName}
      VpcId: !Ref AsgVPC
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckPath: /
      Matcher:
        HttpCode: '200'

  # Listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # ✅ Launch Template (moved out of Listener and fixed)
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub launch-template-${AWS::StackName}
      LaunchTemplateData:
        ImageId: !Ref AmiImage
        InstanceType: !Ref InstanceType
        SecurityGroupIds: [!Ref InstanceSecurityGroup]
        MetadataOptions:
          HttpTokens: required
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash

            # Enable error handling and logging
            set -e
            exec > >(tee /var/log/user-data.log) 2>&1

            # Update system packages
            yum update -y

            # Install Apache, PHP, and stress testing tools
            yum install -y httpd php php-cli stress htop

            # Start and enable Apache
            systemctl start httpd
            systemctl enable httpd

            # Configure Apache to start on boot
            chkconfig httpd on

            # Create the main web page
            cat > /var/www/html/index.php << 'EOF'
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Load Balancer Test - Server <?php echo gethostname(); ?></title>
                <style>
                    body {
                        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                        margin: 0;
                        padding: 20px;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white;
                        min-height: 100vh;
                    }
                    .container {
                        max-width: 800px;
                        margin: 0 auto;
                        background: rgba(255, 255, 255, 0.1);
                        padding: 30px;
                        border-radius: 15px;
                        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
                        backdrop-filter: blur(4px);
                        border: 1px solid rgba(255, 255, 255, 0.18);
                    }
                    .header {
                        text-align: center;
                        margin-bottom: 30px;
                    }
                    .server-info {
                        background: rgba(255, 255, 255, 0.2);
                        padding: 20px;
                        border-radius: 10px;
                        margin: 20px 0;
                    }
                    .info-grid {
                        display: grid;
                        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                        gap: 15px;
                        margin: 20px 0;
                    }
                    .info-card {
                        background: rgba(255, 255, 255, 0.15);
                        padding: 15px;
                        border-radius: 8px;
                        text-align: center;
                    }
                    .info-label {
                        font-weight: bold;
                        font-size: 14px;
                        opacity: 0.8;
                        margin-bottom: 5px;
                    }
                    .info-value {
                        font-size: 18px;
                        font-weight: bold;
                        word-break: break-all;
                    }
                    .stress-section {
                        background: rgba(255, 255, 255, 0.1);
                        padding: 20px;
                        border-radius: 10px;
                        margin: 20px 0;
                        text-align: center;
                    }
                    .btn {
                        background: linear-gradient(45deg, #ff6b6b, #ee5a24);
                        color: white;
                        padding: 12px 25px;
                        border: none;
                        border-radius: 25px;
                        cursor: pointer;
                        font-size: 16px;
                        font-weight: bold;
                        transition: all 0.3s ease;
                        margin: 5px;
                    }
                    .btn:hover {
                        transform: translateY(-2px);
                        box-shadow: 0 5px 15px rgba(0,0,0,0.3);
                    }
                    .refresh-btn {
                        background: linear-gradient(45deg, #4ecdc4, #44a08d);
                    }
                    .status {
                        padding: 10px;
                        margin: 10px 0;
                        border-radius: 5px;
                        text-align: center;
                        font-weight: bold;
                    }
                    .success { background: rgba(46, 204, 113, 0.3); }
                    .error { background: rgba(231, 76, 60, 0.3); }
                    .timestamp {
                        text-align: center;
                        font-size: 12px;
                        opacity: 0.7;
                        margin-top: 20px;
                    }
                    @keyframes pulse {
                        0% { transform: scale(1); }
                        50% { transform: scale(1.05); }
                        100% { transform: scale(1); }
                    }
                    .pulse {
                        animation: pulse 2s infinite;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1 class="pulse">🌐 Load Balancer Test Server</h1>
                        <p>Verify your load balancing configuration</p>
                    </div>

                    <div class="server-info">
                        <h2>📊 Server Information</h2>
                        <div class="info-grid">
                            <div class="info-card">
                                <div class="info-label">Server Hostname</div>
                                <div class="info-value"><?php echo gethostname(); ?></div>
                            </div>
                            <div class="info-card">
                                <div class="info-label">Private IP</div>
                                <div class="info-value"><?php 
                                    $private_ip = file_get_contents('http://169.254.169.254/latest/meta-data/local-ipv4');
                                    echo $private_ip ?: 'N/A';
                                ?></div>
                            </div>
                            <div class="info-card">
                                <div class="info-label">Public IP</div>
                                <div class="info-value"><?php 
                                    $public_ip = @file_get_contents('http://169.254.169.254/latest/meta-data/public-ipv4');
                                    echo $public_ip ?: 'N/A';
                                ?></div>
                            </div>
                            <div class="info-card">
                                <div class="info-label">Instance ID</div>
                                <div class="info-value"><?php 
                                    $instance_id = @file_get_contents('http://169.254.169.254/latest/meta-data/instance-id');
                                    echo $instance_id ?: 'N/A';
                                ?></div>
                            </div>
                            <div class="info-card">
                                <div class="info-label">Availability Zone</div>
                                <div class="info-value"><?php 
                                    $az = @file_get_contents('http://169.254.169.254/latest/meta-data/placement/availability-zone');
                                    echo $az ?: 'N/A';
                                ?></div>
                            </div>
                            <div class="info-card">
                                <div class="info-label">Server Time</div>
                                <div class="info-value"><?php echo date('Y-m-d H:i:s T'); ?></div>
                            </div>
                        </div>
                    </div>

                    <div class="stress-section">
                        <h2>🔥 Stress Testing</h2>
                        <p>Click the button below to put load on this server and test auto-scaling</p>
                        <form method="post" style="display: inline;">
                            <input type="hidden" name="action" value="stress">
                            <button type="submit" class="btn">Start Stress Test (30s)</button>
                        </form>
                        <button onclick="location.reload()" class="btn refresh-btn">🔄 Refresh Page</button>

                        <?php
                        if ($_POST['action'] == 'stress') {
                            echo '<div class="status success">Stress test initiated! Check your CloudWatch metrics.</div>';
                            // Background stress test
                            exec('nohup stress --cpu 2 --timeout 30s > /dev/null 2>&1 &');
                        }
                        ?>
                    </div>

                    <div class="server-info">
                        <h2>💻 System Status</h2>
                        <div class="info-grid">
                            <div class="info-card">
                                <div class="info-label">Load Average</div>
                                <div class="info-value"><?php 
                                    $load = sys_getloadavg();
                                    echo number_format($load[0], 2);
                                ?></div>
                            </div>
                            <div class="info-card">
                                <div class="info-label">Memory Usage</div>
                                <div class="info-value"><?php 
                                    $free = shell_exec('free');
                                    $free = (string)trim($free);
                                    $free_arr = explode("\n", $free);
                                    $mem = explode(" ", $free_arr[1]);
                                    $mem = array_filter($mem);
                                    $mem = array_merge($mem);
                                    $memory_usage = ($mem[2]/$mem[1])*100;
                                    echo number_format($memory_usage, 1) . '%';
                                ?></div>
                            </div>
                            <div class="info-card">
                                <div class="info-label">Uptime</div>
                                <div class="info-value"><?php 
                                    $uptime = shell_exec('uptime -p');
                                    echo trim($uptime);
                                ?></div>
                            </div>
                            <div class="info-card">
                                <div class="info-label">Apache Status</div>
                                <div class="info-value">✅ Running</div>
                            </div>
                        </div>
                    </div>

                    <div class="timestamp">
                        Page loaded at: <?php echo date('Y-m-d H:i:s T'); ?> | 
                        Request from: <?php echo $_SERVER['REMOTE_ADDR']; ?>
                    </div>
                </div>

                <script>
                    // Auto-refresh every 30 seconds to show load balancing in action
                    setTimeout(function(){
                        location.reload();
                    }, 30000);

                    // Add some interactivity
                    document.addEventListener('DOMContentLoaded', function() {
                        const cards = document.querySelectorAll('.info-card');
                        cards.forEach(card => {
                            card.addEventListener('mouseenter', function() {
                                this.style.transform = 'scale(1.05)';
                                this.style.transition = 'transform 0.3s ease';
                            });
                            card.addEventListener('mouseleave', function() {
                                this.style.transform = 'scale(1)';
                            });
                        });
                    });
                </script>
            </body>
            </html>
            EOF

            # Create a health check endpoint
            cat > /var/www/html/health.php << 'EOF'
            <?php
            header('Content-Type: application/json');

            $health_data = array(
                'status' => 'healthy',
                'timestamp' => date('c'),
                'server' => gethostname(),
                'private_ip' => file_get_contents('http://169.254.169.254/latest/meta-data/local-ipv4'),
                'instance_id' => file_get_contents('http://169.254.169.254/latest/meta-data/instance-id'),
                'load_average' => sys_getloadavg()[0],
                'apache_status' => 'running'
            );

            echo json_encode($health_data, JSON_PRETTY_PRINT);
            ?>
            EOF

            # Create API endpoint for system info
            cat > /var/www/html/api.php << 'EOF'
            <?php
            header('Content-Type: application/json');
            header('Access-Control-Allow-Origin: *');

            $system_info = array(
                'server_name' => gethostname(),
                'private_ip' => @file_get_contents('http://169.254.169.254/latest/meta-data/local-ipv4'),
                'public_ip' => @file_get_contents('http://169.254.169.254/latest/meta-data/public-ipv4'),
                'instance_id' => @file_get_contents('http://169.254.169.254/latest/meta-data/instance-id'),
                'availability_zone' => @file_get_contents('http://169.254.169.254/latest/meta-data/placement/availability-zone'),
                'instance_type' => @file_get_contents('http://169.254.169.254/latest/meta-data/instance-type'),
                'timestamp' => date('c'),
                'load_average' => sys_getloadavg(),
                'php_version' => phpversion(),
                'apache_version' => apache_get_version()
            );

            echo json_encode($system_info, JSON_PRETTY_PRINT);
            ?>
            EOF

            # Set proper permissions
            chown -R apache:apache /var/www/html/
            chmod -R 755 /var/www/html/

            # Configure Apache for better performance
            cat >> /etc/httpd/conf/httpd.conf << 'EOF'

            # Performance optimizations
            KeepAlive On
            MaxKeepAliveRequests 100
            KeepAliveTimeout 5

            # Security headers
            Header always set X-Frame-Options DENY
            Header always set X-Content-Type-Options nosniff
            Header always set X-XSS-Protection "1; mode=block"
            Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"

            # Enable compression
            LoadModule deflate_module modules/mod_deflate.so
            <Location />
                SetOutputFilter DEFLATE
                SetEnvIfNoCase Request_URI \
                    \.(?:gif|jpe?g|png)$ no-gzip dont-vary
                SetEnvIfNoCase Request_URI \
                    \.(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip dont-vary
            </Location>
            EOF

            # Enable mod_headers for security headers
            yum install -y mod_ssl

            # Configure log rotation
            cat > /etc/logrotate.d/apache-custom << 'EOF'
            /var/log/httpd/*log {
                daily
                rotate 7
                compress
                delaycompress
                missingok
                notifempty
                sharedscripts
                postrotate
                    /bin/systemctl reload httpd.service > /dev/null 2>/dev/null || true
                endscript
            }
            EOF

            # Create a simple monitoring script
            cat > /usr/local/bin/server-monitor.sh << 'EOF'
            #!/bin/bash
            # Simple server monitoring
            LOG_FILE="/var/log/server-monitor.log"

            echo "$(date): Server monitoring check" >> $LOG_FILE
            echo "Load: $(uptime)" >> $LOG_FILE
            echo "Memory: $(free -m)" >> $LOG_FILE
            echo "Disk: $(df -h /)" >> $LOG_FILE
            echo "---" >> $LOG_FILE
            EOF

            chmod +x /usr/local/bin/server-monitor.sh

            # Set up a cron job for monitoring
            echo "*/5 * * * * /usr/local/bin/server-monitor.sh" | crontab -

            # Restart Apache to apply all configurations
            systemctl restart httpd

            # Ensure Apache is running and enabled
            systemctl enable httpd
            systemctl start httpd

            # Install CloudWatch agent for better monitoring (optional)
            wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            rpm -U ./amazon-cloudwatch-agent.rpm

            # Final status check
            systemctl status httpd >> /var/log/user-data.log

            # Create success marker
            echo "UserData script completed successfully at $(date)" > /tmp/userdata-success

            # Log completion
            echo "UserData script execution completed at $(date)" >> /var/log/user-data.log
        

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      MinSize: "1"
      MaxSize: "4"
      DesiredCapacity: "1"
      TargetGroupARNs: 
        - !Ref TargetGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      MetricsCollection:
        - Granularity: "1Minute"

  # Scaling Policy
  CPUScalingTargetTracking:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50.0
      PolicyType: TargetTrackingScaling

Outputs:
  ALBEndpoint:
    Description: Public URL for the Application Load Balancer
    Value: !Sub "http://${LoadBalancer.DNSName}"
